//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype EssentialTypes2Query =
  TTgMathArgumentWithInvalidEssentialTypeQuery() or
  TTgMathArgumentsWithDifferingStandardTypeQuery()

predicate isEssentialTypes2QueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `tgMathArgumentWithInvalidEssentialType` query
    EssentialTypes2Package::tgMathArgumentWithInvalidEssentialTypeQuery() and
  queryId =
    // `@id` for the `tgMathArgumentWithInvalidEssentialType` query
    "c/misra/tg-math-argument-with-invalid-essential-type" and
  ruleId = "RULE-21-22" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `tgMathArgumentsWithDifferingStandardType` query
    EssentialTypes2Package::tgMathArgumentsWithDifferingStandardTypeQuery() and
  queryId =
    // `@id` for the `tgMathArgumentsWithDifferingStandardType` query
    "c/misra/tg-math-arguments-with-differing-standard-type" and
  ruleId = "RULE-21-23" and
  category = "required"
}

module EssentialTypes2Package {
  Query tgMathArgumentWithInvalidEssentialTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `tgMathArgumentWithInvalidEssentialType` query
      TQueryC(TEssentialTypes2PackageQuery(TTgMathArgumentWithInvalidEssentialTypeQuery()))
  }

  Query tgMathArgumentsWithDifferingStandardTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `tgMathArgumentsWithDifferingStandardType` query
      TQueryC(TEssentialTypes2PackageQuery(TTgMathArgumentsWithDifferingStandardTypeQuery()))
  }
}
