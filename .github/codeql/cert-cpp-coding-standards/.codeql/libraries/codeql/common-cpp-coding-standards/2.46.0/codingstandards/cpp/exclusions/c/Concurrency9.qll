//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Concurrency9Query =
  TPossibleDataRaceBetweenThreadsQuery() or
  TThreadResourceDisposedBeforeThreadsJoinedQuery() or
  TInvalidOperationOnUnlockedMutexQuery() or
  TNonRecursiveMutexRecursivelyLockedQuery() or
  TNonRecursiveMutexRecursivelyLockedAuditQuery() or
  TConditionVariableUsedWithMultipleMutexesQuery() or
  TThreadStorageNotInitializedBeforeUseQuery() or
  TThreadStoragePointerInitializedInsideThreadQuery()

predicate isConcurrency9QueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `possibleDataRaceBetweenThreads` query
    Concurrency9Package::possibleDataRaceBetweenThreadsQuery() and
  queryId =
    // `@id` for the `possibleDataRaceBetweenThreads` query
    "c/misra/possible-data-race-between-threads" and
  ruleId = "DIR-5-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `threadResourceDisposedBeforeThreadsJoined` query
    Concurrency9Package::threadResourceDisposedBeforeThreadsJoinedQuery() and
  queryId =
    // `@id` for the `threadResourceDisposedBeforeThreadsJoined` query
    "c/misra/thread-resource-disposed-before-threads-joined" and
  ruleId = "RULE-22-15" and
  category = "required"
  or
  query =
    // `Query` instance for the `invalidOperationOnUnlockedMutex` query
    Concurrency9Package::invalidOperationOnUnlockedMutexQuery() and
  queryId =
    // `@id` for the `invalidOperationOnUnlockedMutex` query
    "c/misra/invalid-operation-on-unlocked-mutex" and
  ruleId = "RULE-22-17" and
  category = "required"
  or
  query =
    // `Query` instance for the `nonRecursiveMutexRecursivelyLocked` query
    Concurrency9Package::nonRecursiveMutexRecursivelyLockedQuery() and
  queryId =
    // `@id` for the `nonRecursiveMutexRecursivelyLocked` query
    "c/misra/non-recursive-mutex-recursively-locked" and
  ruleId = "RULE-22-18" and
  category = "required"
  or
  query =
    // `Query` instance for the `nonRecursiveMutexRecursivelyLockedAudit` query
    Concurrency9Package::nonRecursiveMutexRecursivelyLockedAuditQuery() and
  queryId =
    // `@id` for the `nonRecursiveMutexRecursivelyLockedAudit` query
    "c/misra/non-recursive-mutex-recursively-locked-audit" and
  ruleId = "RULE-22-18" and
  category = "required"
  or
  query =
    // `Query` instance for the `conditionVariableUsedWithMultipleMutexes` query
    Concurrency9Package::conditionVariableUsedWithMultipleMutexesQuery() and
  queryId =
    // `@id` for the `conditionVariableUsedWithMultipleMutexes` query
    "c/misra/condition-variable-used-with-multiple-mutexes" and
  ruleId = "RULE-22-19" and
  category = "required"
  or
  query =
    // `Query` instance for the `threadStorageNotInitializedBeforeUse` query
    Concurrency9Package::threadStorageNotInitializedBeforeUseQuery() and
  queryId =
    // `@id` for the `threadStorageNotInitializedBeforeUse` query
    "c/misra/thread-storage-not-initialized-before-use" and
  ruleId = "RULE-22-20" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `threadStoragePointerInitializedInsideThread` query
    Concurrency9Package::threadStoragePointerInitializedInsideThreadQuery() and
  queryId =
    // `@id` for the `threadStoragePointerInitializedInsideThread` query
    "c/misra/thread-storage-pointer-initialized-inside-thread" and
  ruleId = "RULE-22-20" and
  category = "mandatory"
}

module Concurrency9Package {
  Query possibleDataRaceBetweenThreadsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `possibleDataRaceBetweenThreads` query
      TQueryC(TConcurrency9PackageQuery(TPossibleDataRaceBetweenThreadsQuery()))
  }

  Query threadResourceDisposedBeforeThreadsJoinedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `threadResourceDisposedBeforeThreadsJoined` query
      TQueryC(TConcurrency9PackageQuery(TThreadResourceDisposedBeforeThreadsJoinedQuery()))
  }

  Query invalidOperationOnUnlockedMutexQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `invalidOperationOnUnlockedMutex` query
      TQueryC(TConcurrency9PackageQuery(TInvalidOperationOnUnlockedMutexQuery()))
  }

  Query nonRecursiveMutexRecursivelyLockedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonRecursiveMutexRecursivelyLocked` query
      TQueryC(TConcurrency9PackageQuery(TNonRecursiveMutexRecursivelyLockedQuery()))
  }

  Query nonRecursiveMutexRecursivelyLockedAuditQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonRecursiveMutexRecursivelyLockedAudit` query
      TQueryC(TConcurrency9PackageQuery(TNonRecursiveMutexRecursivelyLockedAuditQuery()))
  }

  Query conditionVariableUsedWithMultipleMutexesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `conditionVariableUsedWithMultipleMutexes` query
      TQueryC(TConcurrency9PackageQuery(TConditionVariableUsedWithMultipleMutexesQuery()))
  }

  Query threadStorageNotInitializedBeforeUseQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `threadStorageNotInitializedBeforeUse` query
      TQueryC(TConcurrency9PackageQuery(TThreadStorageNotInitializedBeforeUseQuery()))
  }

  Query threadStoragePointerInitializedInsideThreadQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `threadStoragePointerInitializedInsideThread` query
      TQueryC(TConcurrency9PackageQuery(TThreadStoragePointerInitializedInsideThreadQuery()))
  }
}
